<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
  <style>
    body {
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    #canvasContainer {
      border: 5px solid black;
      overflow: hidden;
      display: inline-block;
    }
  </style>
</head>
<body>
  <div id="canvasContainer">
    <script>
      let design;
      let cubes = [];
      let numCubes = 150;
      let cubeSize = 30;

      function setup() {
        let canvasSize = min(windowWidth, windowHeight) * 0.8;
        let canvas = createCanvas(canvasSize, canvasSize, WEBGL);
        canvas.parent('canvasContainer');
        background(255);

        // Create 150 cubes with random positions and rotation speeds
        for (let i = 0; i < numCubes; i++) {
          cubes[i] = {
            x: random(-canvasSize / 2 + cubeSize, canvasSize / 2 - cubeSize),
            y: random(-canvasSize / 2 + cubeSize, canvasSize / 2 - cubeSize),
            z: random(-canvasSize / 2 + cubeSize, canvasSize / 2 - cubeSize),
            rotX: random(-0.02, 0.02),
            rotY: random(-0.02, 0.02),
            rotZ: random(-0.02, 0.02),
            speedX: random(-1, 1),
            speedY: random(-1, 1),
            speedZ: random(-1, 1)
          };
        }
      }

      function draw() {
        background(255);
        drawOrganicDesign();

        push();
        translate(0, 0); // translate to the center of the canvas

        // Draw all cubes floating around randomly and endlessly
        for (let i = 0; i < numCubes; i++) {
          let cube = cubes[i];

          cube.x += cube.speedX;
          cube.y += cube.speedY;
          cube.z += cube.speedZ;

          // Wrap around the canvas
          if (cube.x < -width / 2 + cubeSize) cube.x = width / 2 - cubeSize;
          if (cube.x > width / 2 - cubeSize) cube.x = -width / 2 + cubeSize;
          if (cube.y < -height / 2 + cubeSize) cube.y = height / 2 - cubeSize;
          if (cube.y > height / 2 - cubeSize) cube.y = -height / 2 + cubeSize;
          if (cube.z < -width / 2 + cubeSize) cube.z = width / 2 - cubeSize;
          if (cube.z > width / 2 - cubeSize) cube.z = -width / 2 + cubeSize;

          push();
          translate(cube.x, cube.y, cube.z);
          rotateX(frameCount * cube.rotX);
          rotateY(frameCount * cube.rotY);
          rotateZ(frameCount * cube.rotZ);
          texture(design);
          box(cubeSize);
          pop();
        }

        pop();
      }

       function drawOrganicDesign() {
        design = createGraphics(200, 200);
        design.stroke(random(0, 255), random(0, 255), random(0, 255));
        design.strokeWeight(3);
        design.noFill();
        design.background(255, 50);

        for (let i = 0; i < 20; i++) {
          design.beginShape();
          let x1 = random(design.width);
          let y1 = random(design.height);
          let x2 = random(design.width);
          let y2 = random(design.height);
          let x3 = random(design.width);
          let y3 = random(design.height);
          design.curveVertex(x1, y1);
          design.curveVertex(x2, y2);
          design.curveVertex(x3, y3);
          design.curveVertex(x1, y1);
          design.endShape(CLOSE);
        }
      }

    </script>
  </div>
</body>
</html>
